// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace XService.Models
{
    public partial class projectxxContext : DbContext
    {
        public projectxxContext()
        {
        }

        public projectxxContext(DbContextOptions<projectxxContext> options)
            : base(options)
        {
        }

        public virtual DbSet<criminal> criminal { get; set; }
        public virtual DbSet<non_criminal> non_criminal { get; set; }
        public virtual DbSet<officers> officers { get; set; }
        public virtual DbSet<trial> trial { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseNpgsql("Server=127.0.0.1;Port=5432;Database=projectxx;User Id=postgres;Password=W16zHsD5396;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<criminal>(entity =>
            {
                entity.HasKey(e => e.p_id)
                    .HasName("criminal_pk");

                entity.Property(e => e.address).HasColumnType("character varying");

                entity.Property(e => e.criminal_record)
                    .IsRequired()
                    .HasColumnType("character varying");

                entity.Property(e => e.image)
                    .IsRequired()
                    .HasColumnType("character varying");

                entity.Property(e => e.job).HasColumnType("character varying");

                entity.Property(e => e.name)
                    .IsRequired()
                    .HasColumnType("character varying");
            });

            modelBuilder.Entity<non_criminal>(entity =>
            {
                entity.HasKey(e => e.p_id)
                    .HasName("non_criminal_pk");

                entity.Property(e => e.address).HasColumnType("character varying");

                entity.Property(e => e.image)
                    .IsRequired()
                    .HasColumnType("character varying");

                entity.Property(e => e.job).HasColumnType("character varying");

                entity.Property(e => e.name)
                    .IsRequired()
                    .HasColumnType("character varying");
            });

            modelBuilder.Entity<officers>(entity =>
            {
                entity.HasKey(e => e.of_id)
                    .HasName("officers_pk");

                entity.Property(e => e.image)
                    .IsRequired()
                    .HasColumnType("character varying");

                entity.Property(e => e.name)
                    .IsRequired()
                    .HasColumnType("character varying");

                entity.Property(e => e.t_id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<trial>(entity =>
            {
                entity.HasKey(e => e.t_id)
                    .HasName("trial_pk");

                entity.Property(e => e.place)
                    .IsRequired()
                    .HasColumnType("character varying");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}